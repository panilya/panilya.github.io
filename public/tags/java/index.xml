<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Illia Pantsyr</title>
    <link>https://panilya.github.io/tags/java/</link>
    <description>Recent content in Java on Illia Pantsyr</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 Nov 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://panilya.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ways to reduce JVM Docker image size</title>
      <link>https://panilya.github.io/posts/ways_to_reduce_jvm_docker_image_size/</link>
      <pubDate>Sun, 05 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://panilya.github.io/posts/ways_to_reduce_jvm_docker_image_size/</guid>
      <description>&lt;p&gt;This blog post focuses on optimizing the size of JVM Docker images. It explores various techniques such as multi-stage builds, jlink, jdeps, and experimenting with base images. By implementing these optimizations, deployments can be faster and resource usage can be optimized.&lt;/p&gt;&#xA;&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;&#xA;&lt;p&gt;Since Java 11, there is no pre-bundled JRE provided. As a result, basic Dockerfiles without any optimization can result in large image sizes. In the absence of a provided JRE, it becomes necessary to explore techniques and optimizations to reduce the size of JVM Docker images.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Datafaker 2.0</title>
      <link>https://panilya.github.io/posts/datafaker_2_0/</link>
      <pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://panilya.github.io/posts/datafaker_2_0/</guid>
      <description>&lt;p&gt;One of the major changes in Datafaker 2.0 is the requirement for Java version 17 as a minimum, similar to popular frameworks such as Spring Boot 3.0. This release of Datafaker brings significant improvements to the library&amp;rsquo;s performance, support of Java Records, capability to generate larger amounts of test data, and much more.&lt;/p&gt;&#xA;&lt;h2 id=&#34;schemas-and-transformers&#34;&gt;Schemas and transformers&lt;/h2&gt;&#xA;&lt;p&gt;The most common use case for Datafaker is to generate random readable values in Java, such as firstnames, quotes or other values.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Class Loaders in JVM: An Overview</title>
      <link>https://panilya.github.io/posts/class_loaders_overview/</link>
      <pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://panilya.github.io/posts/class_loaders_overview/</guid>
      <description>&lt;p&gt;Class loaders are an essential part of the Java Virtual Machine (JVM), but many developers consider them to be mysterious. This article aims to demystify the subject by providing a basic understanding of how class loading works in the JVM.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-are-classloaders&#34;&gt;What are classloaders&lt;/h2&gt;&#xA;&lt;p&gt;In the Java Virtual Machine (JVM), classes are loaded dynamically and found through a process called class loading. Class loading is the process of loading a class from its binary representation (usually a .class file) into memory so that it can be executed by the JVM. This is where we need classloaders. Class loaders are used to load .class file into the memory.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
